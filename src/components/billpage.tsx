/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/TgcxQeSI9pM
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import jsPDF from "jspdf";
import { JSX, SVGProps, useEffect, useState } from "react"
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from "@/components/ui/card"
import { Dialog, DialogTrigger, DialogContent } from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"

export function BillPage() {
  const [businessInfo, setBusinessInfo] = useState({
    name: "Acme Inc.",
    address: "123 Main St, Anytown USA",
    phone: "555-555-5555",
    ownerName: "John Doe",
    ownerEmail: "john@acmeinc.com",
  })

  interface invoiceDetailsStruct {
    customerName: string;
    customerAddress: string;
    customerPhone: string;
    items: {
      name: string;
      quantity: number;
      price: number;
    }[];
    taxes: {
      name: string | null;
      rate: number | null;
    }[];
  }
  useEffect(() => {


    return () => {

    }
  }, [])

  const [invoiceDetails, setInvoiceDetails] = useState<invoiceDetailsStruct>(
    {
      customerName: "",
      customerAddress: "",
      customerPhone: "",
      items: [
        // { name: "", quantity: 0, price: 0 }
      ],
      taxes: [
        // { name: "Sales Tax", rate: 0.1 },
        // { name: "VAT", rate: 0.2 },
      ],
    }
  )
  const [pdfUrl, setPdfUrl] = useState('')
  const calculateTotal = () => {
    let total = 0
    invoiceDetails.items.forEach((item) => {
      total += item.quantity * item.price
    })
    invoiceDetails.taxes.forEach((tax) => {
      if (tax.rate) {
        total += total * tax.rate
      }
    })
    return total
  }
  const addTax = () => {
    setInvoiceDetails({
      ...invoiceDetails,
      taxes: [...invoiceDetails.taxes, {
        name: "", rate: 0
      }],
    })
  }
  const removeTax = (index: number) => {
    const newTaxes = [...invoiceDetails.taxes]
    newTaxes.splice(index, 1)
    setInvoiceDetails({ ...invoiceDetails, taxes: newTaxes })
  }

  const updateTax = (index: number, field: string, value: string | number) => {
    const newTaxes = [...invoiceDetails.taxes]
    // newTaxes[index][field] = value
    if (field === "rate") {
      newTaxes[index].rate = typeof value === "number" ? value : parseFloat(value);
    } else {
      newTaxes[index].name = value as string;
    }
    setInvoiceDetails({ ...invoiceDetails, taxes: newTaxes })
  }

  const generatePdf = () => {
    const doc = new jsPDF();

    // Set font and title
    doc.setFont("Helvetica", "bold");
    doc.setFontSize(16);
    doc.text("Invoice", 105, 20,);

    // Business Information
    doc.setFontSize(12);
    doc.setFont("Helvetica", "normal");
    doc.text(`Business Name: ${businessInfo.name}`, 20, 40);
    doc.text(`Owner Name: ${businessInfo.ownerName}`, 20, 50);
    doc.text(`Business Address: ${businessInfo.address}`, 20, 60);
    doc.text(`Business Phone: ${businessInfo.phone}`, 20, 70);
    doc.text(`Owner Email: ${businessInfo.ownerEmail}`, 20, 80);

    // Customer Information
    doc.text(`Customer Name: ${invoiceDetails.customerName}`, 20, 100);
    doc.text(`Customer Address: ${invoiceDetails.customerAddress}`, 20, 110);
    doc.text(`Customer Phone: ${invoiceDetails.customerPhone}`, 20, 120);

    // Items Table
    doc.text("Items:", 20, 140);
    const startY = 150;

    invoiceDetails.items.forEach((item, index) => {
      doc.text(`Item: ${item.name}`, 20, startY + index * 10);
      doc.text(`Quantity: ${item.quantity}`, 100, startY + index * 10);
      doc.text(`Price: $${item.price.toFixed(2)}`, 140, startY + index * 10);
    });

    // Total and Taxes
    const total = calculateTotal();
    doc.text(`Total: $${total.toFixed(2)}`, 20, startY + invoiceDetails.items.length * 10 + 20);

    // Save or download the PDF
    const pdfData = doc.output("blob");
    const pdfUrl = URL.createObjectURL(pdfData);
    setPdfUrl(pdfUrl);

    // Optionally, download the PDF directly
    doc.save("invoice.pdf");
  };

  return (
    <Card className="max-w-4xl mx-auto p-6 sm:p-8 md:p-10">
      <div className="flex justify-between items-start mb-6">
        <div className="grid gap-1">
          <div className="font-semibold">{businessInfo.name}</div>
          <div className="text-sm text-muted-foreground">{businessInfo.ownerName}</div>
          <div className="text-sm text-muted-foreground">{businessInfo.ownerEmail}</div>
        </div>
        {pdfUrl && (
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="outline">View PDF</Button>
            </DialogTrigger>
            <DialogContent className="max-w-max max-h-max">
              <iframe src={pdfUrl} className="w-full h-full" />
            </DialogContent>
          </Dialog>
        )}
      </div>
      <CardHeader>
        <CardTitle>Invoice Generator</CardTitle>
        <CardDescription>Create and download professional invoices</CardDescription>
      </CardHeader>
      <CardContent>
        <form className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="grid gap-4">
            <div className="grid gap-2">
              <Label htmlFor="business-name">Business Name</Label>
              <Input
                id="business-name"
                value={businessInfo.name}
                onChange={(e) => setBusinessInfo({ ...businessInfo, name: e.target.value })}
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="business-address">Business Address</Label>
              <Textarea
                id="business-address"
                value={businessInfo.address}
                onChange={(e) => setBusinessInfo({ ...businessInfo, address: e.target.value })}
                rows={3}
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="business-phone">Business Phone</Label>
              <Input
                id="business-phone"
                value={businessInfo.phone}
                onChange={(e) => setBusinessInfo({ ...businessInfo, phone: e.target.value })}
              />
            </div>
          </div>
          <div className="grid gap-4">
            <div className="grid gap-2">
              <Label htmlFor="customer-name">Customer Name</Label>
              <Input
                id="customer-name"
                value={invoiceDetails.customerName}
                onChange={(e) => setInvoiceDetails({ ...invoiceDetails, customerName: e.target.value })}
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="customer-address">Customer Address</Label>
              <Textarea
                id="customer-address"
                value={invoiceDetails.customerAddress}
                onChange={(e) => setInvoiceDetails({ ...invoiceDetails, customerAddress: e.target.value })}
                rows={3}
              />
            </div>
            <div className="grid gap-2">
              <Label htmlFor="customer-phone">Customer Phone</Label>
              <Input
                id="customer-phone"
                value={invoiceDetails.customerPhone}
                onChange={(e) => setInvoiceDetails({ ...invoiceDetails, customerPhone: e.target.value })}
              />
            </div>
          </div>
          <div className="col-span-2 grid gap-4">
            <div className="grid gap-2">
              <Label htmlFor="items">Items</Label>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Item</TableHead>
                    <TableHead>Quantity</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead />
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {invoiceDetails.items.map((item, index) => (
                    <TableRow key={index}>
                      <TableCell>
                        <Input
                          value={item.name}
                          onChange={(e) => {
                            const newItems = [...invoiceDetails.items]
                            newItems[index].name = e.target.value
                            setInvoiceDetails({ ...invoiceDetails, items: newItems })
                          }}
                        />
                      </TableCell>
                      <TableCell>
                        <Input
                          type="number"
                          value={item.quantity}
                          onChange={(e) => {
                            const newItems = [...invoiceDetails.items]
                            newItems[index].quantity = parseInt(e.target.value)
                            setInvoiceDetails({ ...invoiceDetails, items: newItems })
                          }}
                        />
                      </TableCell>
                      <TableCell>
                        <Input
                          type="number"
                          value={item.price}
                          onChange={(e) => {
                            const newItems = [...invoiceDetails.items]
                            newItems[index].price = parseFloat(e.target.value)
                            setInvoiceDetails({ ...invoiceDetails, items: newItems })
                          }}
                        />
                      </TableCell>
                      <TableCell>
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => {
                            const newItems = [...invoiceDetails.items]
                            newItems.splice(index, 1)
                            setInvoiceDetails({ ...invoiceDetails, items: newItems })
                          }}
                        >
                          <TrashIcon className="w-4 h-4" />
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              <Button
                variant="outline"
                onClick={(e) => {
                  e.preventDefault();
                  setInvoiceDetails({
                    ...invoiceDetails,
                    items: [...invoiceDetails.items, { name: " ", quantity: 0, price: 0 }],
                  })
                }}
              >
                Add Item
              </Button>
            </div>
            <div className="grid gap-4">
              <div className="grid gap-2">
                <Label htmlFor="taxes">Taxes</Label>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Tax Name</TableHead>
                      <TableHead>Tax Rate</TableHead>
                      <TableHead />
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {invoiceDetails.taxes.map((tax, index) => (
                      <TableRow key={index}>
                        <TableCell>
                          <Input value={tax.name ? tax.name : ""} onChange={(e) => updateTax(index, "name", e.target.value)} />
                        </TableCell>
                        <TableCell>
                          <Input
                            type="number"
                            value={tax.rate ? tax.rate * 100 : ''}
                            onChange={(e) => updateTax(index, "rate", parseFloat(e.target.value) / 100)}
                          // suffix="%"
                          />
                        </TableCell>
                        <TableCell>
                          <Button variant="ghost" size="icon" onClick={() => removeTax(index)}>
                            <TrashIcon className="w-4 h-4" />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
                <Button variant="outline" onClick={(e) => {
                  e.preventDefault();
                  addTax();
                }}>
                  Add Tax
                </Button>
              </div>
            </div>
          </div>
        </form>
      </CardContent>
      <CardFooter>
        <div className="flex justify-between items-center">
          <div className="text-2xl font-bold">Total: ${calculateTotal().toFixed(2)}</div>
          <div className="flex gap-2">
            <Button variant="outline" onClick={generatePdf}>
              Download PDF
            </Button>
            <Button type="submit">Send Invoice</Button>
          </div>
        </div>
      </CardFooter>
    </Card>
  )
}

function TrashIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  )
}
